<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Dongle</title>
        <link>https://kimsehyoung.github.io/post/</link>
        <description>Recent content in Posts on Dongle</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Wed, 23 Aug 2023 19:44:57 +0900</lastBuildDate><atom:link href="https://kimsehyoung.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>gRPC Load Balancing in Kubernetes</title>
        <link>https://kimsehyoung.github.io/post/grpc/grpc_load_balancing/</link>
        <pubDate>Wed, 23 Aug 2023 19:44:57 +0900</pubDate>
        
        <guid>https://kimsehyoung.github.io/post/grpc/grpc_load_balancing/</guid>
        <description>&lt;img src="https://kimsehyoung.github.io/post/grpc/grpc_load_balancing/load-balancing.png" alt="Featured image of post gRPC Load Balancing in Kubernetes" /&gt;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Kubernetes에서 gRPC를 사용하는 MSA기반의 솔루션이 있는데, 로드 밸런싱이 안 된다는 문제를 전달 받았다.&lt;br&gt;
자세한 내용을 보기 전에, 우리에게 맞는 해결 방법을 위해 고민했던 내용을 남겨보고자 한다.&lt;/p&gt;
&lt;p&gt;다시 언급하겠지만, 해결 방법은 3가지가 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ClientSide Load Balancing&lt;/li&gt;
&lt;li&gt;L7 Load Balancing&lt;/li&gt;
&lt;li&gt;Service Mesh&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;우선, &lt;strong&gt;3번 Service mesh&lt;/strong&gt;는 고려사항에서 제외하였다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;구축을 하더라도 우리 조직과 고객사에서 안정적으로 관리하기 위한 인력이 있는가?&lt;/li&gt;
&lt;li&gt;우리가 서비스 운영을 하지 않고 있음&lt;/li&gt;
&lt;li&gt;결론적으로 사이드 문제가 클 것으로 보임&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;처음에는, &lt;strong&gt;1번 Client Side&lt;/strong&gt;로 마음이 기울었었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;프록시로 인한 레이턴시 없음&lt;/li&gt;
&lt;li&gt;추가적인 리소스(pod)가 필요 없음&lt;/li&gt;
&lt;li&gt;고객사에서는 K8s Headless Service로만 변경하면 끝&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;다시 한번 마음이 바뀌었는데, &lt;strong&gt;2번 L7 LB&lt;/strong&gt;가 최종 선택이었다..&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Client Side&lt;/strong&gt;는 앱(client &amp;amp; server), 인프라 모두 수정이 필요하기에, 다른 동료가 파악하기 어려움.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client Side&lt;/strong&gt;는 server에서 적절한 &amp;lsquo;MaxConnectionAge&amp;rsquo;을 찾아서 설정해야 함.&lt;/li&gt;
&lt;li&gt;인프라에서만 수정하는게 추후 유연성이 높음 e.g. service mesh&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;사실, 자주 나오던 서비스 메시~!! 를 해보고 싶었지만, 이건 개인 프로젝트에서 하기로 생각하며.. 다음에 적용해보고 여기에 돌아오자.&lt;/p&gt;
&lt;h2 id=&#34;tricky-load-balancing&#34;&gt;Tricky Load Balancing&lt;/h2&gt;
&lt;p&gt;Client가 gRPC 서버로 &lt;strong&gt;Connection&lt;/strong&gt;을 맺은 후, 서버의 cpu/memory 사용량이 증가하면서 &lt;strong&gt;auto scaling policy&lt;/strong&gt;으로 새 pod가 생성된다.
그러나, 새 pod에 트래픽이 전달되지 않는 것을 볼 수 있는데, 이는 gRPC 글에서 얘기한 &lt;code&gt;Multiplexing&lt;/code&gt;으로 인한 것이다.&lt;br&gt;
이를 해결하기 위한 방법으로 크게 3가지 방법이 있다. 상황에 맞는 방식을 선택하는게 필요하며, 이번에는 1, 2번을 적용해보고 다음에 Service Mesh를 적용해보자.
(성능은 proxyless가 가장 좋다)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client-side Load Balancing&lt;/li&gt;
&lt;li&gt;L7 Load Balancing&lt;/li&gt;
&lt;li&gt;Service Mesh
&lt;ul&gt;
&lt;li&gt;proxy&lt;/li&gt;
&lt;li&gt;proxyless (xds)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://kimsehyoung.github.io/post/grpc/grpc_load_balancing/tricky-load-balancing.png&#34;
	width=&#34;380&#34;
	height=&#34;339&#34;
	srcset=&#34;https://kimsehyoung.github.io/post/grpc/grpc_load_balancing/tricky-load-balancing_hua92a8057361e072436c14118fb96fa93_21413_480x0_resize_box_3.png 480w, https://kimsehyoung.github.io/post/grpc/grpc_load_balancing/tricky-load-balancing_hua92a8057361e072436c14118fb96fa93_21413_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Tricky Load Balancing&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;112&#34;
		data-flex-basis=&#34;269px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;(&lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/blog/2018/11/07/grpc-load-balancing-on-kubernetes-without-tears/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kubernetes.io/blog/2018/11/07/grpc-load-balancing-on-kubernetes-without-tears/&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&#34;client-side-load-balancing&#34;&gt;Client-side Load Balancing&lt;/h2&gt;
&lt;p&gt;gRPC는 &lt;strong&gt;Client-side Load Balancing&lt;/strong&gt; 기능을 제공하는데,&lt;code&gt;pick_fist&lt;/code&gt;, &lt;code&gt;round_robin&lt;/code&gt; 2가지 방식이 있다.&lt;br&gt;
&lt;strong&gt;Default&lt;/strong&gt;는  &lt;code&gt;pick_first&lt;/code&gt;인데, 말 그대로 resolver에서 주소 리스트를 받아 첫 번째 주소로 연결을 시도하고,
RPC들은 Channel을 통해 보내진다. 연결이 끊길 경우, &lt;strong&gt;backkoff&lt;/strong&gt;로 다시 주소 리스트에서 연결 가능한 곳으로 connection을 맺게 된다.&lt;br&gt;
&lt;code&gt;round_robin&lt;/code&gt;은 resolver로부터 주소 리스트를 받아서, 각 주소에 대해 &lt;strong&gt;subchannel&lt;/strong&gt;을 생성하고, 연결이 끊기면 다시 연결을 시도한다.&lt;br&gt;
(&lt;a class=&#34;link&#34; href=&#34;https://github.com/grpc/grpc/blob/master/doc/load-balancing.md#load-balancing-policies&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/grpc/grpc/blob/master/doc/load-balancing.md#load-balancing-policies&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;아래에서 pick first, round robin 의  예시를 볼 수 있다.&lt;br&gt;
(&lt;a class=&#34;link&#34; href=&#34;https://github.com/grpc/grpc-go/blob/master/examples/features/load_balancing/README.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/grpc/grpc-go/blob/master/examples/features/load_balancing/README.md&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this is pick first &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;from :10001&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this is pick first &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;from :10001&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this is pick first &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;from :10001&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this is round robin &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;from :10001&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this is round robin &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;from :10002&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this is round robin &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;from :10003&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위의 예시를 테스트해보면 Round-robin 설정으로 여러 서버에 로드밸런싱이 되는 것을 확인할 수 있다. 그러나 Kubenetes에서 추가로 필요한 작업들이 몇 가지 있다.&lt;/p&gt;
&lt;p&gt;위의 예제에서는 서버 IP를 가지고 Custom resolver을 사용했지만, 나는 Kubernetes &lt;code&gt;Service&lt;/code&gt; 도메인으로부터 &lt;strong&gt;Pods의 IP&lt;/strong&gt; 주소들을 가져오려고 한다.
&lt;strong&gt;gRPC의&lt;/strong&gt; 기본 &lt;code&gt;resolver&lt;/code&gt;를 사용할 경우, Default는 &lt;strong&gt;passthrough&lt;/strong&gt;방식인데, 이는 Client가 &lt;strong&gt;Service&lt;/strong&gt; 이름에서 여러 IP 주소를 얻을 수 없기에, &lt;code&gt;dns&lt;/code&gt; scheme를 기본으로 설정해줘야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://pkg.go.dev/google.golang.org/grpc/resolver#SetDefaultScheme&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pkg.go.dev/google.golang.org/grpc/resolver#SetDefaultScheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/grpc/grpc-go/blob/master/resolver/resolver.go#L39&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/grpc/grpc-go/blob/master/resolver/resolver.go#L39&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그럼, 계속 이어서 다음으로 필요한 내용들을 보자.&lt;br&gt;
Kuberntes의 &lt;code&gt;Service&lt;/code&gt; 레이어는 Client 요청을 L4 레벨 로드밸런싱으로 Service에 연결된 Pods 중 하나로 전달해준다.&lt;br&gt;
Client에서 Lound-robin방식으로 설정한다 해도 이 서비스 레이어의 &lt;strong&gt;L4&lt;/strong&gt;, &lt;strong&gt;persistent connection&lt;/strong&gt;으로 인해, 한 Client의 요청은 하나의 Pod로만 전달되고, 다른 replica pods들은 트래픽을 받지 못하게 된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kimsehyoung.github.io/post/grpc/grpc_load_balancing/service.png&#34;
	width=&#34;766&#34;
	height=&#34;561&#34;
	srcset=&#34;https://kimsehyoung.github.io/post/grpc/grpc_load_balancing/service_hu973698e1dcc75b81b55580eb0c587af1_98629_480x0_resize_box_3.png 480w, https://kimsehyoung.github.io/post/grpc/grpc_load_balancing/service_hu973698e1dcc75b81b55580eb0c587af1_98629_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Kubernetes Service&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;136&#34;
		data-flex-basis=&#34;327px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;(&lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/docs/tutorials/kubernetes-basics/expose/expose-intro/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kubernetes.io/docs/tutorials/kubernetes-basics/expose/expose-intro/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;그럼, 어떻게 하면 될지 계속 살펴보자.&lt;br&gt;
Kubernetes는 &lt;code&gt;Headless Service&lt;/code&gt;로 &lt;strong&gt;Service&lt;/strong&gt;에 대한 단일 IP가 아닌, 각 포드 IP에 대한 다중 A 레코드를 생성할 수 있는데,
이를 통해 Client가 직접 replica Pods에 대한 주소 리스트를 받아서 로드밸런싱을 할 수 있다.&lt;/p&gt;
&lt;p&gt;그런데 &amp;hellip; 여기서 문제가 하나 더 있다. autoScaling 설정으로 사용자 트래픽이 증가하면서 생성된 새 Pods에는 요청이 전달되지
않는 것이다. 왜냐하면, Client가 Resolver로부터 주소 리스트를 받아서 subchannels를 생성한 후에, 서버로 연결이 끊어져 실패하기
전까지 새로운 주소로 연결을 시도하지 않기 때문이다. 그래서, &lt;code&gt;MaxConnectionAge&lt;/code&gt;를 설정하여 일정시간이 지나면 재연결을 하는 방법이 있는데,
설정 값에 따라 pod가 새로 생성된 후 트래픽이 전달되기까지는 시간이 걸릴 것이다.&lt;/p&gt;
&lt;p&gt;이제, 위 내용을 토대로 Kubernetes에서 Client Load Balancing 예시를 보겠다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;resolver&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SetDefaultScheme&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dns&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;conn&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;grpc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Dial&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;service-name&amp;gt;&amp;lt;namespace&amp;gt;.svc.cluster.local&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;grpc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WithDefaultServiceConfig&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`{&amp;#34;loadBalancingConfig&amp;#34;: [{&amp;#34;round_robin&amp;#34;:{}}]}`&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;grpc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;grpc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;KeepaliveParams&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;keepalive&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServerParameters&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxConnectionAge&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Minute&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;MaxConnectionAgeGrace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;}),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;clusterIP&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;l7-load-balancer&#34;&gt;L7 Load Balancer&lt;/h2&gt;
&lt;p&gt;gRPC는 TCP connection을 유지하기에, Kubernetes Service의 L4가 아닌 L7 Load Balancer가 따로 필요하다.&lt;br&gt;
L7 로드밸런싱을 제공하는 여러 Load Balancer가 있는데, 그 중 &lt;strong&gt;Traefik&lt;/strong&gt;으로 진행해본다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kimsehyoung.github.io/post/grpc/grpc_load_balancing/linkerd.png&#34;
	width=&#34;570&#34;
	height=&#34;354&#34;
	srcset=&#34;https://kimsehyoung.github.io/post/grpc/grpc_load_balancing/linkerd_huad22a2832c36b9a82810854146adcf5a_33987_480x0_resize_box_3.png 480w, https://kimsehyoung.github.io/post/grpc/grpc_load_balancing/linkerd_huad22a2832c36b9a82810854146adcf5a_33987_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Application Load Balancer&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;161&#34;
		data-flex-basis=&#34;386px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;(&lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/blog/2018/11/07/grpc-load-balancing-on-kubernetes-without-tears/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kubernetes.io/blog/2018/11/07/grpc-load-balancing-on-kubernetes-without-tears/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;서비스에 대한 &lt;strong&gt;manifest&lt;/strong&gt; 파일을 클러스터에 적용하고, 오토스케일링을 위해 &lt;strong&gt;metrics-server&lt;/strong&gt;도 배포해준다.&lt;br&gt;
그 다음, &lt;code&gt;Traefik&lt;/code&gt;도 알맞게 설정 후 적용한다.&lt;br&gt;
아래에서는, test-a, test-b, test-c gRPC 서버들이 있고, client에서 요청을 전달한다고 가정한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl apply -f metrics-server.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl apply -f test-a.yaml -f test-b.yaml -f test-c.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm repo add traefik https://helm.traefik.io/traefik
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm repo update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm search repo traefik/traefik --versions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm show values traefik/traefik --version &amp;lt;version&amp;gt; traefik-values.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# traefik-values 파일을 수정해서, 설정 오버라이딩&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm install traefik-l7-lb traefik/traefik --version &amp;lt;version&amp;gt; -n dongle -f traefik-values-override.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl apply -f traefik-route.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;test-a&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;test-a-service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dongle&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ClusterIP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;app.kubernetes.io/name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;test-a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#f92672&#34;&gt;protocol&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;TCP&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;targetPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deployment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;test-a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dongle&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;replicas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;HorizontalPodAutoscaler&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;test-a-hpa&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dongle&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;scaleTargetRef&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deployment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;test-a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;minReplicas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;maxReplicas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;traefik-values-override&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://github.dev/traefik/traefik-helm-chart/blob/master/traefik/templates/service.yaml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://github.com/traefik/traefik-helm-chart/blob/master/traefik/VALUES.md#values&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://github.com/traefik/traefik-helm-chart/blob/master/traefik/VALUES.md&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;test-a&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;expose&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;exposedPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;protocol&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;TCP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;test-b&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10002&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;expose&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;exposedPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10002&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;protocol&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;TCP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;test-c&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10003&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;expose&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;exposedPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10003&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;protocol&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;TCP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;service&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;LoadBalancer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;traefik-route&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://doc.traefik.io/traefik/routing/providers/kubernetes-crd/#kind-ingressroute&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://doc.traefik.io/traefik/user-guides/grpc/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;traefik.containo.us/v1alpha1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;IngressRoute&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;test-a-ingress-route&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dongle&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;entryPoints&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;test-a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;routes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;match&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;PathPrefix(`/`)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Rule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test-a-service&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;scheme&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;h2c&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;traefik.containo.us/v1alpha1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;IngressRoute&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;test-b-ingress-route&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dongle&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;entryPoints&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;test-b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;routes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;match&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;PathPrefix(`/`)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Rule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test-b-service&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10002&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;scheme&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;h2c&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;traefik.containo.us/v1alpha1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;IngressRoute&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;test-c-ingress-route&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dongle&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;entryPoints&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;test-c&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;routes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;match&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;PathPrefix(`/`)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Rule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test-b-service&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10003&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;scheme&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;h2c&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>gRPC를 알아보자</title>
        <link>https://kimsehyoung.github.io/post/grpc/grpc/</link>
        <pubDate>Wed, 23 Aug 2023 19:11:30 +0900</pubDate>
        
        <guid>https://kimsehyoung.github.io/post/grpc/grpc/</guid>
        <description>&lt;img src="https://kimsehyoung.github.io/post/grpc/grpc/grpc.png" alt="Featured image of post gRPC를 알아보자" /&gt;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Google 내부에서 마이크로 서비스를 연결하는데 사용한 Stubby라는 RPC 인프라를 표준화한 오픈소스 프레임워크&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;가장 큰 특징은 &lt;code&gt;Probocol Buffers&lt;/code&gt;, &lt;code&gt;HTTP/2&lt;/code&gt;를 사용&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Protobuf&lt;/code&gt;는 google에서 만든 구조화된 데이터를 직렬화하는 방식으로 JSON 형식보다 작은 크기로 효율적&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP/2&lt;/code&gt;는 헤더 압축, 이진 형식, 서버 푸시, 멀티플렉싱&amp;hellip; 으로 성능 향상을 가져옴&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-proto&#34; data-lang=&#34;proto&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Protobuf로 서비스 API를 정의
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HelloRequest&lt;/span&gt; {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HelloResponse&lt;/span&gt; {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;service&lt;/span&gt; HelloService {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;rpc&lt;/span&gt; SayHello (HelloRequest) &lt;span style=&#34;color:#66d9ef&#34;&gt;returns&lt;/span&gt; (HelloResponse);&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;rpc&#34;&gt;RPC&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;RPC&lt;/code&gt;(Remote Procedure Call)는 클라이언트가 서버의 procedure(함수)를 마치 로컬에 있는 것처럼 호출하는 것이다.
다음 동작 단계를 보면서, 어떤 건지 알아보자.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;RPC&lt;/code&gt;는 로컬 메서드를 호출하는 것처럼 보이지만, 클라이언트와 서버는 별도의 프로세스로 다른 주소 공간을 가지므로, 서로 통신을 위해서 JSON, Ptotobuf, Thrift 같은 &lt;code&gt;IDL&lt;/code&gt;(Interface Definition Language)로 호출 규약을 정의한다.&lt;/li&gt;
&lt;li&gt;rpcgen으로 &lt;code&gt;IDL&lt;/code&gt; 파일을 컴파일하여 클라이언트와 서버의 &lt;code&gt;Stub&lt;/code&gt; 코드를 생성한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stub&lt;/code&gt;은 Source code(C++, Java, Python, Go&amp;hellip;)의 형태로 서버에서는 Stub을 사용하여 프로시저에 대한 &lt;code&gt;기능 구현&lt;/code&gt;이 필요하다.&lt;/li&gt;
&lt;li&gt;각 클라이언트, 서버에서는 &lt;code&gt;Stub&lt;/code&gt; 코드를 같이 빌드한다.&lt;/li&gt;
&lt;li&gt;클라이언트는 전달할 매개변수를 &lt;code&gt;Mashalling&lt;/code&gt;하고, 로컬 Stub 프로시저를 호출하여 서버에 메시지를 전송한다.&lt;/li&gt;
&lt;li&gt;서버는 Stub을 통해 해당 프로시저가 호출되고, 매개변수를 &lt;code&gt;Unmarshalling&lt;/code&gt;하여 요청을 수행한 결과를 Mashalling하여 클라이언트에게 전송한다.&lt;/li&gt;
&lt;li&gt;클라이언트는 해당 서버 프로시저에 대한 결과를 받으며, 마치 &lt;code&gt;로컬 메서드&lt;/code&gt;를 호출하는 것처럼 사용을 할 수 있게 된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://kimsehyoung.github.io/post/grpc/grpc/how-rpc-works.png&#34;
	width=&#34;263&#34;
	height=&#34;221&#34;
	srcset=&#34;https://kimsehyoung.github.io/post/grpc/grpc/how-rpc-works_hu1646f65cbd4ca5e461afe8f60f3ef0b0_1418_480x0_resize_box_3.png 480w, https://kimsehyoung.github.io/post/grpc/grpc/how-rpc-works_hu1646f65cbd4ca5e461afe8f60f3ef0b0_1418_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;How RPC works&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;119&#34;
		data-flex-basis=&#34;285px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;(&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/windows/win32/rpc/how-rpc-works&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/en-us/windows/win32/rpc/how-rpc-works&lt;/a&gt;)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;http2-multiplexing&#34;&gt;HTTP/2 Multiplexing&lt;/h2&gt;
&lt;p&gt;위에서 언급한 듯이 gRPC에서 주요 특징 중 하나는 HTTP/2를 사용하는 것이다.&lt;br&gt;
그중에 다음 글의 Load Balancing에서 중요한 &lt;code&gt;Multiplexing&lt;/code&gt;에 대해 조금 살펴보자.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP/1.0&lt;/strong&gt;에서 매 요청마다 연결하고 닫는 오버헤드가 있었고, &lt;strong&gt;HTTP/1.x&lt;/strong&gt;에서 TCP connection 재사용으로 네트워크 효율을 개선하고자  &lt;code&gt;persistent connection&lt;/code&gt;(aka &lt;strong&gt;long-lived&lt;/strong&gt;)이 도입되었다.&lt;br&gt;
그러나, 한 번에 하나의 요청과 응답만을 처리할 수 있었고, 이는 &lt;code&gt;Head-of-Line blocking&lt;/code&gt;(앞선 요청이 오래걸릴 경우, 다음 요청들이 지연)을 야기했다.&lt;br&gt;
&lt;strong&gt;HTTP/2&lt;/strong&gt;에서는 &lt;code&gt;Multiplexing&lt;/code&gt;으로 단일 TCP 연결(&lt;strong&gt;persistence connection&lt;/strong&gt;)에서 여러 요청과 응답을 순서와 상관없이 동시에 처리하여, HOL blocking 문제를 해결하였다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kimsehyoung.github.io/post/grpc/grpc/hol-blocking.jpeg&#34;
	width=&#34;820&#34;
	height=&#34;412&#34;
	srcset=&#34;https://kimsehyoung.github.io/post/grpc/grpc/hol-blocking_hu48042d1284b42dcdfcd7a66d8ee04a92_40789_480x0_resize_q75_box.jpeg 480w, https://kimsehyoung.github.io/post/grpc/grpc/hol-blocking_hu48042d1284b42dcdfcd7a66d8ee04a92_40789_1024x0_resize_q75_box.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;HOL-blocking&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;199&#34;
		data-flex-basis=&#34;477px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;(&lt;a class=&#34;link&#34; href=&#34;https://www.imperva.com/learn/performance/http2/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.imperva.com/learn/performance/http2/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;그럼, &lt;code&gt;HTTP/2&lt;/code&gt;에 대해 조금 더 알아보자.&lt;/p&gt;
&lt;p&gt;HTTP/2에서 통신의 최소 단위는 Binary 형태의 &lt;code&gt;Frame&lt;/code&gt;으로, 하나의 HTTP &lt;code&gt;Message&lt;/code&gt;를 여러 개의 Frames으로 나누어
보내는데, 연결된 &lt;code&gt;Connection&lt;/code&gt;에서 양방향 데이터 흐름인 &lt;code&gt;Stream&lt;/code&gt;으로 Frames을 전송하고 목적지에서 재조립하게 된다.&lt;br&gt;
(☞ HTTP/1.x의 통신 단위는 Plain text 형태인 요청/응답 Message)&lt;/p&gt;
&lt;p&gt;키 포인트인 &lt;code&gt;Multiplexing&lt;/code&gt;은 &lt;strong&gt;Single Connection&lt;/strong&gt;에서 동시에 여러 &lt;strong&gt;Streams&lt;/strong&gt;을 처리하는 것이다.&lt;br&gt;
또한, 각 요청/응답 메시지에서 분할된 Frame들은 동일한 Stream에서 전송되며 스트림 식별자를 가지고 있어서,
수신 측에서 프레임들이 동일한 메시지의 일부임을 알 수 있게 된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kimsehyoung.github.io/post/grpc/grpc/http2.png&#34;
	width=&#34;936&#34;
	height=&#34;732&#34;
	srcset=&#34;https://kimsehyoung.github.io/post/grpc/grpc/http2_hu011f28f2d5e7c6dd80285b4d5eca857c_34133_480x0_resize_box_3.png 480w, https://kimsehyoung.github.io/post/grpc/grpc/http2_hu011f28f2d5e7c6dd80285b4d5eca857c_34133_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;HTTP/2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;127&#34;
		data-flex-basis=&#34;306px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;(&lt;a class=&#34;link&#34; href=&#34;https://www.cncf.io/blog/2018/07/03/http-2-smarter-at-scale/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cncf.io/blog/2018/07/03/http-2-smarter-at-scale/&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&#34;grpc-channel&#34;&gt;gRPC Channel&lt;/h2&gt;
&lt;p&gt;gRPC에서 새로운 개념인 &lt;strong&gt;channel&lt;/strong&gt;이 있는데, HTTP/2와 함께 알아보자.&lt;br&gt;
&lt;strong&gt;Channel&lt;/strong&gt;은 특정 Host와 Port의 gRPC 서버에 대한 &lt;strong&gt;Connection&lt;/strong&gt;을 추상화한 인터페이스이며,
이를 통해 연결을 유지하고 관리하며, 효과적으로 활용할 수 있게 해준다.&lt;br&gt;
또한, HTTP/2는 single connection에서 동시에 여러 메시지 스트림을 전송할 수 있게 해줬다면,
&lt;strong&gt;channel&lt;/strong&gt;은 여기서 좀 더 확장되어, 동시에 &lt;strong&gt;multiple connections&lt;/strong&gt;에서 여러 메시지 스트림을 가능하게 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Create a gRPC channel in Go
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;conn&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;grpc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Dial&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;serverAddr&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;opts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://kimsehyoung.github.io/post/grpc/grpc/channel.png&#34;
	width=&#34;2317&#34;
	height=&#34;1875&#34;
	srcset=&#34;https://kimsehyoung.github.io/post/grpc/grpc/channel_huf141b0a4dd6755aa1cf0a0d0bc27eb0e_800078_480x0_resize_box_3.png 480w, https://kimsehyoung.github.io/post/grpc/grpc/channel_huf141b0a4dd6755aa1cf0a0d0bc27eb0e_800078_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Channel&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;123&#34;
		data-flex-basis=&#34;296px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;(&lt;a class=&#34;link&#34; href=&#34;https://grpc.io/blog/grpc-on-http2/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://grpc.io/blog/grpc-on-http2/&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&#34;grpc-gateway&#34;&gt;gRPC-Gateway&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;gRPC&lt;/code&gt;는 좋은 장점들이 있지만, 몇 가지 고려할 점이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개발자들이 gRPC에 익숙지 않거나, 기존 서비스들이 REST 기반이라면 한 번에 서비스 전체에 gRPC를 적용하기 어려움&lt;/li&gt;
&lt;li&gt;브라우저에서 gRPC가 지원이 안 되기에, 추가적으로 &lt;code&gt;gRPC-Web&lt;/code&gt; 또는 &lt;code&gt;gRPC-Gateway&lt;/code&gt; 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이러한 이유들로 &lt;code&gt;gRPC-Gateway&lt;/code&gt;를 사용할 수 있다.&lt;br&gt;
gRPC Gateway는 &lt;code&gt;REST&lt;/code&gt;를 &lt;code&gt;gRPC&lt;/code&gt;로 변환하는 &lt;code&gt;리버스 프록시 서버&lt;/code&gt;를 생성하는 방식으로 gRPC, REST 모두 호출 가능하게 해준다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kimsehyoung.github.io/post/grpc/grpc/grpc-gateway.png&#34;
	width=&#34;693&#34;
	height=&#34;475&#34;
	srcset=&#34;https://kimsehyoung.github.io/post/grpc/grpc/grpc-gateway_hudaed239fae906faca4e9c879395c2cc6_31372_480x0_resize_box_3.png 480w, https://kimsehyoung.github.io/post/grpc/grpc/grpc-gateway_hudaed239fae906faca4e9c879395c2cc6_31372_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;gRPC-Gateway&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;145&#34;
		data-flex-basis=&#34;350px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;(&lt;a class=&#34;link&#34; href=&#34;https://github.com/grpc-ecosystem/grpc-gateway&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/grpc-ecosystem/grpc-gateway&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&#34;pros-and-cons&#34;&gt;Pros and Cons&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Pros&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Polyglot 환경 (protobuf를 기반으로 gRPC가 지원하는 다양한 언어로 Stub코드 생성)&lt;/li&gt;
&lt;li&gt;양방향 통신 (Unary, Client streaming, server streaming, Bidirectional Streaming)&lt;/li&gt;
&lt;li&gt;네트워크 성능 (Protobuf, HTTP/2)&lt;/li&gt;
&lt;li&gt;API 문서 없이 Protobuf만으로 인터페이스 명세 (필요 시, gRPC-Gateway plugin으로 OpenAPI 문서 생성 가능)&lt;/li&gt;
&lt;li&gt;Interceptor, Load balancing 같은 유용한 내장 기능 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Cons&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSON/REST를 주로 사용했다면, 러닝 커브로 인한 도입 어려움&lt;/li&gt;
&lt;li&gt;gRPC는 브라우저 직접적인 지원이 안 되기에, 추가적인 방법이 필요&lt;/li&gt;
&lt;li&gt;TCP 연결을 유지하는 HTTP/2의 특성으로 인해, 까다로운 로드 밸런싱&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cncf.io/blog/2018/07/03/http-2-smarter-at-scal&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cncf.io/blog/2018/07/03/http-2-smarter-at-scal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://grpc.io/docs/languages/go/basics/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://grpc.io/docs/languages/go/basics/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Kubernetes 설치</title>
        <link>https://kimsehyoung.github.io/post/kubernetes/kubeadm/</link>
        <pubDate>Sun, 13 Aug 2023 16:30:14 +0900</pubDate>
        
        <guid>https://kimsehyoung.github.io/post/kubernetes/kubeadm/</guid>
        <description>&lt;img src="https://kimsehyoung.github.io/post/kubernetes/kubeadm/kubeadm.png" alt="Featured image of post Kubernetes 설치" /&gt;&lt;hr&gt;
&lt;h2 id=&#34;prerequisite&#34;&gt;prerequisite&lt;/h2&gt;
&lt;h3 id=&#34;container-runtime&#34;&gt;container runtime&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use containerd (containerd, CRI-O, docker)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install -y &lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ca-certificates &lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    curl &lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gnupg &lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lsb-release
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkdir -p /etc/apt/keyrings
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -fsSL &amp;lt;https://download.docker.com/linux/ubuntu/gpg&amp;gt; | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deb [arch=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;dpkg --print-architecture&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; signed-by=/etc/apt/keyrings/docker.gpg] &amp;lt;https://download.docker.com/linux/ubuntu&amp;gt; \\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;lsb_release -cs&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; stable&amp;#34;&lt;/span&gt; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install containerd.io&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1.6.14-1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-mark hold containerd.io
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Disabled cri plugin such as below line in config.toml after installing containerd package&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# disabled_plugins = [&amp;#34;cri&amp;#34;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# So, set the config to default&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Use SystemdCgroup and restart daemon&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;containerd config default | sudo tee /etc/containerd/config.toml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/SystemdCgroup = false/SystemdCgroup = true/&amp;#39;&lt;/span&gt; /etc/containerd/config.toml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl restart containerd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;network&#34;&gt;network&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;overlay&lt;/strong&gt; enables networking between nods&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;br_netfilter&lt;/strong&gt; enables networking between pods&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF | sudo tee /etc/modules-load.d/k8s.conf
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;overlay
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;br_netfilter
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo modprobe overlay
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo modprobe br_netfilter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sysctl params required by setup, params persist across reboots&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF | sudo tee /etc/sysctl.d/k8s.conf
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;net.bridge.bridge-nf-call-iptables  = 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;net.bridge.bridge-nf-call-ip6tables = 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;net.ipv4.ip_forward                 = 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Apply sysctl params without reboot&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo sysctl --system
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;swap-off&#34;&gt;swap off&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;swap memory support from v 1.22&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Check swap memory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;swapon -s&amp;#34;&lt;/span&gt; or &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;free -h&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Disable swap&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo swapoff -a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Disable swap on startup&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/ swap / s/^\\(.*\\)$/#\\1/g&amp;#39;&lt;/span&gt; /etc/fstab
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Implementation after reboot&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;crontab -l 2&amp;gt;/dev/null; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@reboot /sbin/swapoff -a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; | crontab - &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; true
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;setup-cluster&#34;&gt;setup cluster&lt;/h2&gt;
&lt;h3 id=&#34;caution&#34;&gt;caution&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;pod&amp;rsquo;s CIDR block overlap&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;control-plane-node&#34;&gt;control-plane node&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TBD: use public/private IP for api server address&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pod-cidr: set according to your environment&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;e.g. Use 10.244.0.0/16 host: 192&amp;hellip;, docker: 172&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Install packages needed to use the Kubernetes apt repository&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install -y apt-transport-https ca-certificates curl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Download the Google Cloud public signing key:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg &amp;lt;https://packages.cloud.google.com/apt/doc/apt-key.gpg&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Add the Kubernetes apt repository&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] &amp;lt;https://apt.kubernetes.io/&amp;gt; kubernetes-xenial main&amp;#34;&lt;/span&gt; | sudo tee /etc/apt/sources.list.d/kubernetes.list
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Install&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt-cache madison kubeadm | head -20
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install -y kubelet&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1.26.0-00 kubeadm&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1.26.0-00 kubectl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1.26.0-00
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-mark hold kubelet kubeadm kubectl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Check packages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubelet --version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubeadm version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl version --client
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Pre-pull the required control-plane images&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubeadm config images list --kubernetes-version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v1.26.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo kubeadm config images pull --kubernetes-version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v1.26.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Set up the Kubernetes control plane&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo kubeadm init --apiserver-advertise-address&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;private-ip&amp;gt; --apiserver-cert-extra-sans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;private-ip&amp;gt; --pod-network-cidr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;pod-cidr&amp;gt; --node-name &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;hostname -s&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p $HOME/.kube
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chown &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;id -u&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;id -g&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; $HOME/.kube/config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get nodes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get namespaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pods -n kube-system
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;network-plugins&#34;&gt;network plugins&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use calico cni&lt;/li&gt;
&lt;li&gt;flannel: &amp;lsquo;10.244.0.0/16&amp;rsquo;, calico: &amp;lsquo;192.168.0.0/16&amp;rsquo; …&lt;/li&gt;
&lt;li&gt;To avoid overlapping, modify cidr to &amp;lsquo;10.244.0.0/16&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &amp;lt;https://raw.githubusercontent.com/projectcalico/calico/v3.24.5/manifests/calico.yaml&amp;gt; -O
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Edit &amp;#39;CALICO_IPV4POOL_CIDR&amp;#39; in calico.yml, if CIDR block is changed from default for avoiding overlap.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl apply -f calico.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl describe node | egrep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;^Name|PodCIDR&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;helm&#34;&gt;helm&lt;/h2&gt;
&lt;h3 id=&#34;install&#34;&gt;install&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -fsSL -o get_helm.sh &amp;lt;https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;700&lt;/span&gt; get_helm.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./get_helm.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reference&#34;&gt;reference&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Read references while following below guide step by step&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set-up
&lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/docs/setup/production-environment/container-runtimes/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kubernetes.io/docs/setup/production-environment/container-runtimes/&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
&lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;runtime
&lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/ko/docs/setup/production-environment/container-runtimes/https://github.com/containerd/containerd/blob/main/docs/getting-started.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kubernetes.io/ko/docs/setup/production-environment/container-runtimes/https://github.com/containerd/containerd/blob/main/docs/getting-started.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;network
&lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-networkhttps://projectcalico.docs.tigera.io/getting-started/kubernetes/self-managed-onprem/onpremises#install-calico-with-kubernetes-api-datastore-more-than-50-nodes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-networkhttps://projectcalico.docs.tigera.io/getting-started/kubernetes/self-managed-onprem/onpremises#install-calico-with-kubernetes-api-datastore-more-than-50-nodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;swap memory
&lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/ko/docs/concepts/architecture/nodes/#swap-memory&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kubernetes.io/ko/docs/concepts/architecture/nodes/#swap-memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;port
&lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/docs/reference/networking/ports-and-protocols/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kubernetes.io/docs/reference/networking/ports-and-protocols/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;helm
&lt;a class=&#34;link&#34; href=&#34;https://helm.sh/docs/intro/install/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://helm.sh/docs/intro/install/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Git Workflow</title>
        <link>https://kimsehyoung.github.io/post/git/workflow/</link>
        <pubDate>Sun, 13 Aug 2023 10:15:29 +0900</pubDate>
        
        <guid>https://kimsehyoung.github.io/post/git/workflow/</guid>
        <description>&lt;img src="https://kimsehyoung.github.io/post/git/workflow/git_workflow.jpg" alt="Featured image of post Git Workflow" /&gt;&lt;h2 id=&#34;trunk-based&#34;&gt;Trunk based&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;브랜치 관리가 간단하고, CI/CD 와 함께 신속, 지속적인 개발과 배포에 용이&lt;/li&gt;
&lt;li&gt;코드베이스가 항상 배포 가능한 상태를 유지하므로, 긴급 수정이나 기능 추가가 빠르게 이루어짐.&lt;/li&gt;
&lt;li&gt;모든 개발자가 단일 브랜치에서 작업하기 때문에, 코드 품질과 안정성 관리에 주의가 필요함.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Branch&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;main&lt;/li&gt;
&lt;li&gt;short-term&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git-flow&#34;&gt;Git flow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2010&lt;/li&gt;
&lt;li&gt;프로젝트의 안전성과 관리를 높이는데 초점을 맞춤.&lt;/li&gt;
&lt;li&gt;브랜치 관리가 복잡하고, 신속한 배포가 어려움.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Branch&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;main&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;항상 production에 배포 가능한 안정적인 코드를 유지하며, 모든 작업의 기준 브랜치 (permanent)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;develop&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;개발자가 feature 브랜치를 merge (permanent)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;feature&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;기능 개발을 위한 브랜치로, 개발이 완료되면 develop 브랜치로 merge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;release&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;배포 준비를 위해 QA(Intergration Test) 및 bug fix 후 main, develop로 merge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hotfix&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;긴급한 버그 수정을 위한 브랜치로, main에서 분기하여 수정 후 main, develop으로 merge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://kimsehyoung.github.io/post/git/workflow/git-flow.png&#34;
	width=&#34;671&#34;
	height=&#34;288&#34;
	srcset=&#34;https://kimsehyoung.github.io/post/git/workflow/git-flow_hu5ba9d37bf9c4e7a0a0386bb43d906b12_26965_480x0_resize_box_3.png 480w, https://kimsehyoung.github.io/post/git/workflow/git-flow_hu5ba9d37bf9c4e7a0a0386bb43d906b12_26965_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;git flow&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;232&#34;
		data-flex-basis=&#34;559px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;github-flow&#34;&gt;GitHub flow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2011&lt;/li&gt;
&lt;li&gt;git flow 의 복잡성을 줄이기 위해 고안됨.&lt;/li&gt;
&lt;li&gt;빠른 개발 및 배포와 피드백&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Branch&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;main&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;production에 배포되는 안정적인 버전의 브랜치이며, 좀 더 엄격한 규칙이 필요(permanent)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;feature&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;기능 개발을 위한 브랜치로, 개발이 완료되면 main 브랜치로 merge&lt;/li&gt;
&lt;li&gt;브랜치명은 작업 내용을 표현할 수 있도록 명명&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://kimsehyoung.github.io/post/git/workflow/github-flow.png&#34;
	width=&#34;401&#34;
	height=&#34;179&#34;
	srcset=&#34;https://kimsehyoung.github.io/post/git/workflow/github-flow_hua4ff7fc27af53de93917916480ec2266_12612_480x0_resize_box_3.png 480w, https://kimsehyoung.github.io/post/git/workflow/github-flow_hua4ff7fc27af53de93917916480ec2266_12612_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;github flow&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;224&#34;
		data-flex-basis=&#34;537px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;gitlab-flow&#34;&gt;GitLab flow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2014&lt;/li&gt;
&lt;li&gt;Git flow와 GitHub flow의 중간 정도의 혼합 방식&lt;/li&gt;
&lt;li&gt;환경 별 브랜치 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Branch&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;main&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;항상 production에 배포 가능한 안정적인 코드를 유지하며, 모든 작업의 기준 브랜치 (permanent)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;feature&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;기능 개발이 완료되면 main 브랜치로 merge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;staging&lt;/strong&gt;(optional)
&lt;ul&gt;
&lt;li&gt;staging환경에서 변경 사항을 테스트 및 검증하여 문제가 없으면 production으로 병함 (permanent)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;production&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;실제 서비스에 배포되는 브랜치 (permanent)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;어떻게-적용하면-좋을까&#34;&gt;어떻게 적용하면 좋을까?&lt;/h2&gt;
&lt;p&gt;복잡하고 큰 규모의 프로젝트, 정기 릴리스가 필요한 때 Git Flow를 적용하면 좋을 것 같다. 차량, IOT 기기와 같은 분야에서 많이 이용될 것이고, 참여했던 차량 SW 프로젝트에서 기반으로 한 것이 Git Flow이다.&lt;/p&gt;
&lt;p&gt;빠른 변화와 피드백, 하루에도 여러 번의 배포가 이루어진다면 Trunk Based, GitHub Flow 기반의 Workflow를 사용할 수 있다.
SaaS, Agile 방식에 적합하고, 단순하지만 그만큼 자동화 테스트, 롤백, 코드 리뷰와 같은 개발 문화 등이 이루어져야 할 것이다.&lt;/p&gt;
&lt;p&gt;Workflow는 딱 정하는 것이 아닌 조직, 프로젝트, 여러 가지 현재 상황에 맞추어 가는 것이 필요하다.
실제로 안정성을 위해 &amp;lsquo;feature-develop-main&amp;rsquo;, &amp;lsquo;feature-main-production&amp;rsquo;로 구성을 했다가, CI/CD에 unit test, e2e를 적용 후에 &amp;lsquo;feature-main&amp;rsquo;으로 변경을 했었다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>리눅스 명령어</title>
        <link>https://kimsehyoung.github.io/post/linux/commands/</link>
        <pubDate>Sat, 12 Aug 2023 23:43:26 +0900</pubDate>
        
        <guid>https://kimsehyoung.github.io/post/linux/commands/</guid>
        <description>&lt;img src="https://kimsehyoung.github.io/post/linux/commands/linux_commands.jpg" alt="Featured image of post 리눅스 명령어" /&gt;&lt;h2 id=&#34;network&#34;&gt;Network&lt;/h2&gt;
&lt;h3 id=&#34;tcpdump&#34;&gt;tcpdump&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;tcpdump&lt;/code&gt; prints out a description of the contents of packets on a network interface.
&lt;a class=&#34;link&#34; href=&#34;https://www.tcpdump.org/manpages/tcpdump.1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.tcpdump.org/manpages/tcpdump.1.html&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tcpdump dst 192.168.11.11 and port &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tcpdump -i eno1 host 192.168.11.11
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tcpdump host 192.168.11.11 and tcp port &lt;span style=&#34;color:#ae81ff&#34;&gt;443&lt;/span&gt; -w tcpdump.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tcpdump -r tcpdump.log
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;nc&#34;&gt;nc&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;nc&lt;/code&gt; scans TCP and UDP connections&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://linux.die.net/man/1/nc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://linux.die.net/man/1/nc&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nc -zv 192.168.123.123 443
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; Connection to 192.168.123.123 &lt;span style=&#34;color:#ae81ff&#34;&gt;443&lt;/span&gt; port &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;tcp/*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; succeeded!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;arping&#34;&gt;arping&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;arping&lt;/code&gt; sends ARP request to a neighbor host.&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://man7.org/linux/man-pages/man8/arping.8.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://man7.org/linux/man-pages/man8/arping.8.html&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo arping 192.168.123.123
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; bytes from a1:b2:c3:d4:e5:f6 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;192.168.123.123&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;etc&#34;&gt;ETC&lt;/h2&gt;
&lt;h3 id=&#34;top&#34;&gt;top&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;top&lt;/code&gt; displays system info as well as a list of processes or threads currently managed by the Linux Kernel.&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://man7.org/linux/man-pages/man1/top.1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://man7.org/linux/man-pages/man1/top.1.html&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -p &amp;lt;pid&amp;gt; -H
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;tee&#34;&gt;tee&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;tee&lt;/code&gt; reads from standard input and writes to standard output and files.&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://man7.org/linux/man-pages/man1/tee.1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://man7.org/linux/man-pages/man1/tee.1.html&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt; | tee OUTFILE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat OUTFILE | tee NEWFILE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt; | tee -a OUTFILE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt; | tee -a OUTFILE /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Why use tee?&lt;br&gt;
-&amp;gt; It might be thought that &lt;strong&gt;echo&lt;/strong&gt;, &lt;strong&gt;cat&lt;/strong&gt; is sufficient. But, They can’t write into &lt;strong&gt;root&lt;/strong&gt; files.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;permission denied&amp;#34; occured.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /root/test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# It works successfully.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt; | sudo tee -a /root/test.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;lsof&#34;&gt;lsof&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;lsof&lt;/code&gt; lists file information about files opened by processes.&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://man7.org/linux/man-pages/man8/lsof.8.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://man7.org/linux/man-pages/man8/lsof.8.html&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo lsof -a -p &lt;span style=&#34;color:#ae81ff&#34;&gt;1234567&lt;/span&gt; -d cwd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;COMMAND     PID USER  FD TYPE DEVICE SIZE/OFF   NODE NAME
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 &lt;span style=&#34;color:#ae81ff&#34;&gt;1234567&lt;/span&gt; test cwd  DIR   8,2    &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;5656565&lt;/span&gt; /home/test/test-server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;screen&#34;&gt;screen&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;screen&lt;/code&gt; multiplexes a physical terminal to each virtual terminal.&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://linux.die.net/man/1/screen&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://linux.die.net/man/1/screen&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When a long-running task on a remote machine is performed, It helps that the SSH session is terminated and the work is corrupted or lost.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create a new session&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;screen -S test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Detach the session&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ctrl-a + d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;screen -ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Resume a detached screen session.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;screen -r test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Exit with the session termination.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;exit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pstree&#34;&gt;pstree&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;pstree&lt;/strong&gt; displays a tree of process.&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://man7.org/linux/man-pages/man1/pstree.1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://man7.org/linux/man-pages/man1/pstree.1.html&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;screen -S test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./test-app &amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ctrl-a + d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;screen -ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pstree -p &lt;span style=&#34;color:#ae81ff&#34;&gt;1234567&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;lsblk&#34;&gt;lsblk&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;lsblk&lt;/strong&gt; lists information about all available or the specified block devices.&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://man7.org/linux/man-pages/man8/lsblk.8.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://man7.org/linux/man-pages/man8/lsblk.8.html&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lsblk -o name,rota,size,mountpoint
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mount&#34;&gt;mount&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;mount&lt;/strong&gt; serves to attach the file system on some device to the specific directory.&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://linux.die.net/man/8/mount&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://linux.die.net/man/8/mount&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount /dev/sda /backup
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;unmount /dev/sda
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df -h
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
